import time

import cv2
import numpy as np

labelsPath = 'yolo-coco/coco.names'
LABELS = open(labelsPath).read().strip().split("\n")
print(LABELS)

vehicleIndexes = [1, 2, 3, 5, 7]

COLORS = np.random.randint(0, 255, size=(len(LABELS), 3), dtype="uint8")

weightsPath = 'yolo-coco/yolov3.weights'
configPath = 'yolo-coco/yolov3.cfg'
net = cv2.dnn.readNetFromDarknet(configPath, weightsPath)


def call():

    count_vehicle()


def count_vehicle():
    cap = cv2.VideoCapture(0)

    while 1:
        _, image = cap.read()
        image = cv2.resize(image, (1200, 640))
        (H, W) = image.shape[:2]

        ln = net.getLayerNames()

        # print((H, W))
        ul = net.getUnconnectedOutLayers()
        ln = [ln[i - 1] for i in ul]
        blob = cv2.dnn.blobFromImage(image, 1 / 255.0, (416, 416), swapRB=True, crop=False)
        net.setInput(blob)
        layerOutputs = net.forward(ln)
        boxes = []
        confidences = []
        classIDs = []
        final_count = []
        for output in layerOutputs:
            for detection in output:
                scores = detection[5:]
                classID = np.argmax(scores)

                if classID in vehicleIndexes:
                    confidence = scores[classID]
                    if confidence > 0.5:
                        print("class = ",classID)
                        box = detection[0:4] * np.array([W, H, W, H])
                        (centerX, centerY, width, height) = box.astype("int")
                        x = int(centerX - (width / 2))
                        y = int(centerY - (height / 2))
                        boxes.append([x, y, int(width), int(height)])
                        confidences.append(float(confidence))
                        classIDs.append(classID)


        idxs = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.3)

        if len(idxs) > 0:
            for i in idxs.flatten():
                # print(f"idxs = {idxs.flatten()}")
                (x, y) = (boxes[i][0], boxes[i][1])
                (w, h) = (boxes[i][2], boxes[i][3])
                color = [int(c) for c in COLORS[classIDs[i]]]
                cv2.rectangle(image, (x, y), (x + w, y + h),color, 2)
                text = "{}: {:.4f}".format(LABELS[classIDs[i]], confidences[i])
                cv2.putText(image, text, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
                final_count.append(i)

        cv2.imshow("", image)
        # print(len(vehicles))

        if cv2.waitKey(1) == ord('q'):
            break
        print(len(final_count))
        count=0








        #text1 = "vehicles: {}".format(str(len(final_count)))
        cap.release()
        cv2.destroyAllWindows()
        break



    cap.release()
    cv2.destroyAllWindows()
    call()


call()
